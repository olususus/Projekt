from database import Database
from reservation import Reservation
from customer import Customer
from utils import validate_email
import pygame
import cv2
from time import sleep
import requests
import gmplot
import folium
import webbrowser
from gtfs import read_gtfs_file
import csv
from functools import lru_cache
import customtkinter as ctk, customtkinter
from CTkMessagebox import CTkMessagebox


customtkinter.set_appearance_mode("System")  # Modes: "System" (standard), "Dark", "Light"
customtkinter.set_default_color_theme("blue")  # Themes: "blue" (standard), "green", "dark-blue"


# class WeatherApp:
#     def __init__(self, master):
#         self.master = master
#         master.title("Weather Information")

#         self.label_city = ctk.CTkLabel(text="Wprowadź miasto:")
#         self.label_city.pack()

#         self.entry_city = Entry(master)
#         self.entry_city.pack()

#         self.button_get_weather = ctk.CTkButton(text="Pobierz Pogodę", command=self.get_weather)
#         self.button_get_weather.pack()

#         self.label_weather_info = ctk.CTkLabel(text="")
#         self.label_weather_info.pack()

#     def get_weather(self):
#         city = self.entry_city.get()
#         if city:
#             try:
#                 # Tworzymy URL zapytania do API MetaWeather
#                 url = f"https://www.metaweather.com/api/location/search/?query={city}"

#                 # Wysyłamy zapytanie i pobieramy odpowiedź
#                 response = requests.get(url)
#                 data = response.json()

#                 # Pobieramy identyfikator (woeid) dla podanego miasta
#                 if data and len(data) > 0:
#                     woeid = data[0]["woeid"]

#                     # Tworzymy URL zapytania na podstawie woeid
#                     url = f"https://www.metaweather.com/api/location/{woeid}/"

#                     # Wysyłamy zapytanie i pobieramy odpowiedź
#                     response = requests.get(url)
#                     data = response.json()

#                     # Wyciągamy interesujące nas informacje o pogodzie
#                     if data and "consolidated_weather" in data:
#                         consolidated_weather = data["consolidated_weather"]
#                         if consolidated_weather and len(consolidated_weather) > 0:
#                             weather_today = consolidated_weather[0]
#                             temperature = round(weather_today["the_temp"], 2)
#                             weather_state = weather_today["weather_state_name"]

#                             # Aktualizujemy etykietę z informacjami o pogodzie
#                             weather_info = f"Temperatura: {temperature}°C\nStan pogody: {weather_state}"
#                             self.label_weather_info.config(text=weather_info)
#                         else:
#                             CTkMessagebox.showwarning("Ostrzeżenie", "Brak danych pogodowych dla podanego miasta.")
#                     else:
#                         CTkMessagebox.showwarning("Ostrzeżenie", "Brak danych pogodowych dla podanego miasta.")
#                 else:
#                     CTkMessagebox.showwarning("Ostrzeżenie", "Nie znaleziono podanego miasta.")
#             except Exception as e:
#                 CTkMessagebox("Błąd", f"Wystąpił błąd: {str(e)}")
#         else:
#             CTkMessagebox("Błąd", "Proszę wprowadzić nazwę miasta.")
class StartScreen:
    def __init__(self, master):
        self.master = master
        master.title("Hotel Reservation System")

        # Inicjalizacja ekranu startowego
        pygame.init()
        self.screen = pygame.display.set_mode((1920, 1080), pygame.NOFRAME)
        pygame.display.set_caption("Start Screen")

        # Odtwarzanie filmu
        self.movie = "loading_screen.mp4"  # Wprowadź nazwę pliku filmowego
        self.cap = cv2.VideoCapture(self.movie)
        self.frame_rate = int(self.cap.get(cv2.CAP_PROP_FPS))
        pygame.mixer.quit()
        self.clock = pygame.time.Clock()

    def play_movie(self):
        while True:
            ret, frame = self.cap.read()
            if not ret:
                self.cap.set(cv2.CAP_PROP_POS_FRAMES, 0)
                break

            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            frame = pygame.image.frombuffer(frame.tostring(), frame.shape[1::-1], "RGB")

            self.screen.blit(frame, (0, 0))
            pygame.display.flip()

            self.clock.tick(self.frame_rate)

        self.cap.release()
        pygame.quit()

        # Po zakończeniu odtwarzania filmu, przejdź do interfejsu Tkinter
        self.show_main_interface()

    def show_main_interface(self):
        # Inicjalizacja aplikacji Tkinter po zakończeniu odtwarzania filmu
        root = App()
        root.mainloop()

class App(customtkinter.CTk):
    def __init__(self):
        super().__init__()
        self.title("Hotel Warszawa - System Rezerwacji")
        
        self.db = Database("hotel.db")
        self.db.create_tables()

        self.label_name = ctk.CTkLabel(self, text="Imię i nazwisko klienta:")
        self.label_name.grid(row=0, column=0)

        self.label_email = ctk.CTkLabel(self, text="Adres email klienta:")
        self.label_email.grid(row=1, column=0)

        self.label_start_date = ctk.CTkLabel(self, text="Data rozpoczęcia (RRRR-MM-DD):")
        self.label_start_date.grid(row=2, column=0)

        self.label_end_date = ctk.CTkLabel(self, text="Data zakończenia (RRRR-MM-DD):")
        self.label_end_date.grid(row=3, column=0)

        self.entry_name = ctk.CTkEntry(self)
        self.entry_name.grid(row=0, column=1)

        self.entry_email = ctk.CTkEntry(self)
        self.entry_email.grid(row=1, column=1)

        self.entry_start_date = ctk.CTkEntry(self)
        self.entry_start_date.grid(row=2, column=1)

        self.entry_end_date = ctk.CTkEntry(self)
        self.entry_end_date.grid(row=3, column=1)

        self.submit_button = ctk.CTkButton(self, text="Zarezerwuj", command=self.submit_reservation)
        self.submit_button.grid(row=4, column=0, columnspan=2)

        self.additional_features_button = ctk.CTkButton(self, text="Dodatkowe Funkcje", command=self.open_additional_features())
        self.additional_features_button.grid(row=5, column=0, columnspan=2)

        self.button_explore = ctk.CTkButton(self, text="Zwiedzanie", command=self.explore_places)
        self.button_explore.grid(row=6, column=0, columnspan=2)


    def explore_places(self):
        location = customtkinter.CTkInputDialog(title="Zwiedzanie", text="Podaj lokalizację:")
        if location:
            try:
                # Tworzymy URL zapytania do Google Places API
                url = f"https://maps.googleapis.com/maps/api/place/textsearch/json?query=popularne+miejsca+w+{location}&key=AIzaSyA_NiZBwDqs0mV32KBDe_pNem23aVOad5U"

                # Wysyłamy zapytanie i pobieramy odpowiedź
                response = requests.get(url)
                data = response.json()

                # Sprawdzamy czy otrzymaliśmy dane
                if "results" in data:
                    results = data["results"]
                    places_list = "\n".join([result["name"] for result in results])
                    CTkMessagebox(title="Popularne miejsca", message=f"Popularne miejsca w {location}:\n{places_list}")
                else:
                    CTkMessagebox(title="Ostrzeżenie", message="Brak danych o popularnych miejscach.")
            except Exception as e:
                CTkMessagebox(title="Błąd", message=f"Wystąpił błąd: {str(e)}")
        else:
            CTkMessagebox(title="Błąd", message="Proszę wprowadzić lokalizację.")

    def submit_reservation(self):
        customer_name = self.entry_name.get()
        customer_email = self.entry_email.get()
        start_date = self.entry_start_date.get()
        end_date = self.entry_end_date.get()

        if customer_name and customer_email and start_date and end_date:
            try:
                validate_email(customer_email)
                customer = Customer(customer_name, customer_email)
                customer_id = self.db.add_customer(customer)

                if customer_id is not None:
                    reservation = Reservation(customer_id, start_date, end_date)
                    if self.db.add_reservation(reservation):
                        CTkMessagebox("Sukces", "Rezerwacja została dodana.")
                    else:
                        CTkMessagebox("Błąd", "Wystąpił błąd podczas dodawania rezerwacji.")
                else:
                    CTkMessagebox("Błąd", "Wystąpił błąd podczas dodawania klienta.")
            except ValueError as e:
                CTkMessagebox("Błąd", str(e))
        else:
            CTkMessagebox("Błąd", "Proszę uzupełnić wszystkie pola.")

    def open_additional_features(self):
        additional_features_window = ctk.CTkToplevel(self)
        additional_features_window.title("Dodatkowe Funkcje")
    
        admin_mode_button = ctk.CTkButton(additional_features_window, text="Admin Mode", command=self.admin_mode)
        admin_mode_button.pack()

        children_module_button = ctk.CTkButton(additional_features_window, text="Moduł dla dzieci", command=self.open_children_module)
        children_module_button.pack()

        events_button = ctk.CTkButton(additional_features_window, text="Wydarzenia w okolicy", command=self.display_nearby_events)
        events_button.pack()

        restaurant_button = ctk.CTkButton(additional_features_window, text="Znajdź Restauracje", command=self.find_nearby_restaurants)
        restaurant_button.pack()
        def open_map():
            # Utwórz mapę Warszawy
            warsaw_map = folium.Map(location=[52.2297, 21.0122], zoom_start=12)

            # Dodaj znaczniki punktów wartych odwiedzenia
            points_of_interest = [
                {"name": "Stare Miasto", "location": [52.2503, 21.0125]},
                {"name": "Łazienki Królewskie", "location": [52.2159, 21.0355]},
                {"name": "Pałac Kultury i Nauki", "location": [52.2315, 21.0067]},
                {"name": "Muzeum Powstania Warszawskiego", "location": [52.2322, 20.9811]},
                {"name": "Ogród Saski", "location": [52.240303, 21.007661]},
                {"name": "Centrum Nauki Kopernik", "location": [52.241930, 21.028512]},
                {"name": "Dom Twórcy", "location": [52.282009, 21.061219]}
            ]

            for point in points_of_interest:
                folium.Marker(location=point["location"], popup=point["name"]).add_to(warsaw_map)

            # Zapisz mapę do pliku HTML i otwórz ją w przeglądarce
            warsaw_map.save("warsaw_map.html")
            webbrowser.open("warsaw_map.html")

        map_button = ctk.CTkButton(additional_features_window, text="Zwiedzanie Warszawy", command=open_map)
        map_button.pack()

    def display_nearby_events(self):
        nearby_events_window = ctk.CTkToplevel(self.master)
        nearby_events_window.title("Wydarzenia w okolicy")

        latitude = 52.22854757598444 
        longitude = 20.9951219230219
        # Klucz API Google Places (musisz go mieć i wstawić tutaj)
        api_key = 'AIzaSyA_NiZBwDqs0mV32KBDe_pNem23aVOad5U'

        # Parametry zapytania do Google Places API
        url = f'https://maps.googleapis.com/maps/api/place/nearbysearch/json?location={latitude},{longitude}&radius=1000&type=event&key={api_key}'

        try:
            # Wykonaj zapytanie HTTP GET
            response = requests.get(url)
            data = response.json()

            # Sprawdź, czy odpowiedź jest prawidłowa
            if response.status_code == 200:
                # Przetwórz dane o wydarzeniach
                for event in data['results']:
                    name = event['name']
                    address = event['vicinity']
                    event_label = ctk.CTkLabel(nearby_events_window, text=f'Wydarzenie: {name}, Adres: {address}')
                    event_label.pack()

            else:
                error_label = ctk.CTkLabel(nearby_events_window, text=f'Błąd: {response.status_code}')
                error_label.pack()

        except Exception as e:
            error_label = ctk.CTkLabel(nearby_events_window, text=f'Błąd podczas pobierania danych: {str(e)}')
            error_label.pack()

    def find_directionsnotworking1(self):
        location = customtkinter.CTkInputDialog("Znajdź dojazd", "Podaj miejsce, do którego chcesz dojechać:")
        if location:
            try:
                # Tworzymy URL zapytania do Google Maps Directions API
                url = f"https://www.google.com/maps/dir/?api=AIzaSyA_NiZBwDqs0mV32KBDe_pNem23aVOad5U&destination={location}"

                webbrowser.open(url)

            except Exception as e:
                CTkMessagebox("Błąd", f"Wystąpił błąd: {str(e)}")
        else:
            CTkMessagebox("Błąd", "Proszę wprowadzić miejsce docelowe.")


    #NIE DZIALAJACA FUNKCJA FIND DIRECTIONS (do mozliwego zreimplementowania)

    # def find_directions(self, stops, routes, trips, stop_times):
    #     directions_window = Toplevel(self.master)
    #     directions_window.title("Znajdź dojazd")

    #     # Utwórz listę przystanków
    #     stops_listbox = Listbox(directions_window, selectmode="multiple")
    #     stops_scrollbar = Scrollbar(directions_window, orient="vertical", command=stops_listbox.yview)
    #     stops_listbox.config(yscrollcommand=stops_scrollbar.set)
    #     stops_scrollbar.pack(side="right", fill="y")
    #     stops_listbox.pack(side="left", fill="both", expand=True)

    #     for stop in stops:
    #         stops_listbox.insert(END, stop['stop_name'])

    #     # Przycisk do wyboru
    #     select_button = Button(directions_window, text="Wybierz", command=lambda: self.get_selected_stops(stops_listbox.curselection(), stops, routes, trips, stop_times))
    #     select_button.pack()

    # def get_selected_stops(self, selected_indices, stops, routes, trips, stop_times):
    #     selected_stops = [stops[i] for i in selected_indices]
    #     if len(selected_stops) != 2:
    #         CTkMessagebox("Błąd", "Wybierz dokładnie dwa przystanki!")
    #         return

    #     # Wyodrębnij identyfikatory przystanków
    #     stop_ids = [stop['stop_id'] for stop in selected_stops]

    #     # Znajdź trasy, które przechodzą przez wybrane przystanki
    #     available_routes = set()
    #     for trip in trips:
    #         if 'stop_id' in trip and trip['stop_id'] in stop_ids:
    #             available_routes.add(trip['route_id'])


    #     # Znajdź wspólne trasy dla obu przystanków
    #     common_routes = []
    #     for route_id in available_routes:
    #         stop_count = 0
    #         for stop_time in stop_times:
    #             if stop_time['route_id'] == route_id and stop_time['stop_id'] in stop_ids:
    #                 stop_count += 1
    #         if stop_count == 2:
    #             common_routes.append(route_id)

    #     if len(common_routes) == 0:
    #         CTkMessagebox("Informacja", "Brak wspólnych tras między wybranymi przystankami.")
    #     else:
    #         CTkMessagebox("Informacja", f"Wspólne trasy między wybranymi przystankami: {', '.join(common_routes)}")

    
        # Tworzenie interaktywnej mapy Google Maps
    
    def find_nearby_restaurants(self):
        location = customtkinter.CTkInputDialog(title="Znajdź Restauracje", text="Podaj lokalizację (miasto, ulica, itp.):")
        if location:
            try:
                # Utwórz zapytanie do API Google Places
                url = f"https://maps.googleapis.com/maps/api/place/textsearch/json?query=restaurants+in+{location}&key=AIzaSyA_NiZBwDqs0mV32KBDe_pNem23aVOad5U"

                # Wyślij zapytanie i pobierz odpowiedź
                response = requests.get(url)
                data = response.json()

                # Przetwórz odpowiedź i wyświetl restauracje
                if "results" in data:
                    restaurants = [res["name"] for res in data["results"]]
                    if restaurants:
                        CTkMessagebox(title="Restauracje w okolicy", message=f"Restauracje w Okolicy {location}""\n".join(restaurants))
                    else:
                        CTkMessagebox(title="Restauracje w Okolicy", message="Brak restauracji w pobliżu.")
                else:
                    CTkMessagebox(title="Błąd", message="Brak danych o restauracjach.")
            except Exception as e:
                CTkMessagebox(title="Błąd", message=f"Wystąpił błąd: {str(e)}")
        else:
            CTkMessagebox(title="Błąd", message="Proszę wprowadzić lokalizację.")


    

    def admin_mode(self):
        password = customtkinter.CTkInputDialog(title="Admin Mode", text="Podaj hasło:")
        if password == "123123":
            admin_window = ctk.CTkToplevel(self)
            admin_window.title("Tryb admina")

            all_reservations = self.db.get_all_reservations()
            for idx, reservation in enumerate(all_reservations, start=1):
                reservation_info = f"ID: {reservation[0]}, Customer ID: {reservation[1]}, Start Date: {reservation[2]}, End Date: {reservation[3]}"
                ctk.CTkLabel(admin_window, text=reservation_info).grid(row=idx, column=0)

            export_button = ctk.CTkButton(admin_window, text="Eksportuj dane", command=self.export_data)
            export_button.grid(row=len(all_reservations) + 1, column=0, columnspan=2)

            delete_button = ctk.CTkButton(admin_window, text="Usuń rezerwację", command=self.delete_reservation)
            delete_button.grid(row=len(all_reservations) + 2, column=0, columnspan=2)
        if password != "123123":
            ctk.config(title="Błąd", text="Nieprawidłowe hasło. Napisz cokolwiek")

    def open_children_module(self):
        children_module_window = ctk.CTkToplevel(self.master)
        children_module_window.title("Moduł dla dzieci")

        # Dodajmy zabawialnię dla dzieci
        playground_button = ctk.CTkButton(children_module_window, text="Bawialnia", command=self.playground)
        playground_button.pack()

        # Dodajmy brodzik dla dzieci
        pool_button = ctk.CTkButton(children_module_window, text="Brodzik", command=self.pool)
        pool_button.pack()

    def playground(self):
        # Tutaj możesz dodać funkcje związane z zabawialnią dla dzieci
        CTkMessagebox(title="Bawialnia", message="W Bawialni dla dzieci: 'Dzieci w Kulkach™' znajdują się:\n- Zabawki\n- Kulki\n- Telewizor z bajkami\n- Konsola XBOX oraz PLAYSTATION\n- Duży wybór płyt CD.")

    def pool(self):
        # Tutaj możesz dodać funkcje związane z brodzikiem dla dzieci
        CTkMessagebox(title="Brodzik", message="W Brodziku: 'Woda z Dziecmi™; znajduje się:\n- Woda w temperaturze pokojowej\n- Zjeżdzalnia\n- Zabawki wodne\n- Pistolety wodne.")


    def delete_reservation(self):
        reservation_id = customtkinter.CTkInputDialog(title="Usuń rezerwację", text="Podaj ID rezerwacji do usunięcia:")
        if reservation_id:
            if self.db.delete_reservation(reservation_id):
                CTkMessagebox(title="Sukces", message="Rezerwacja została usunięta.")
            else:
                CTkMessagebox(title="Błąd", message="Błąd podczas usuwania rezerwacji.")
        else:
            CTkMessagebox(title="Błąd", message="Nieprawidłowe ID rezerwacji.")

    def export_data(self):
        file_name = ctk.filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text files", "*.txt")])
        if file_name:
            all_reservations = self.db.get_all_reservations()
            with open(file_name, "w") as file:
                for reservation in all_reservations:
                    file.write(f"ID: {reservation[0]}, Customer ID: {reservation[1]}, Start Date: {reservation[2]}, End Date: {reservation[3]}\n")
            CTkMessagebox(title="Sukces", message="Dane zostały pomyślnie wyeksportowane do pliku.")

if __name__ == "__main__":
    root = App()
    app = StartScreen(root)
    app.play_movie()
    sleep(6)
    root.mainloop()